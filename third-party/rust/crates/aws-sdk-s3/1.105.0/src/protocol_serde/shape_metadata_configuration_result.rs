// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_metadata_configuration_result(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::MetadataConfigurationResult, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MetadataConfigurationResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DestinationResult") /* DestinationResult com.amazonaws.s3#MetadataConfigurationResult$DestinationResult */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_destination_result::de_destination_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_result(var_1);
            }
            ,
            s if s.matches("JournalTableConfigurationResult") /* JournalTableConfigurationResult com.amazonaws.s3#MetadataConfigurationResult$JournalTableConfigurationResult */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_journal_table_configuration_result::de_journal_table_configuration_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_journal_table_configuration_result(var_2);
            }
            ,
            s if s.matches("InventoryTableConfigurationResult") /* InventoryTableConfigurationResult com.amazonaws.s3#MetadataConfigurationResult$InventoryTableConfigurationResult */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_inventory_table_configuration_result::de_inventory_table_configuration_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inventory_table_configuration_result(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::metadata_configuration_result_correct_errors(builder).build())
}
