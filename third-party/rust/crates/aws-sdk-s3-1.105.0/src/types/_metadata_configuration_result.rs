// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 Metadata configuration for a general purpose bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataConfigurationResult {
    /// <p>The destination settings for a metadata configuration.</p>
    pub destination_result: ::std::option::Option<crate::types::DestinationResult>,
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub journal_table_configuration_result: ::std::option::Option<crate::types::JournalTableConfigurationResult>,
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub inventory_table_configuration_result: ::std::option::Option<crate::types::InventoryTableConfigurationResult>,
}
impl MetadataConfigurationResult {
    /// <p>The destination settings for a metadata configuration.</p>
    pub fn destination_result(&self) -> ::std::option::Option<&crate::types::DestinationResult> {
        self.destination_result.as_ref()
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn journal_table_configuration_result(&self) -> ::std::option::Option<&crate::types::JournalTableConfigurationResult> {
        self.journal_table_configuration_result.as_ref()
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn inventory_table_configuration_result(&self) -> ::std::option::Option<&crate::types::InventoryTableConfigurationResult> {
        self.inventory_table_configuration_result.as_ref()
    }
}
impl MetadataConfigurationResult {
    /// Creates a new builder-style object to manufacture [`MetadataConfigurationResult`](crate::types::MetadataConfigurationResult).
    pub fn builder() -> crate::types::builders::MetadataConfigurationResultBuilder {
        crate::types::builders::MetadataConfigurationResultBuilder::default()
    }
}

/// A builder for [`MetadataConfigurationResult`](crate::types::MetadataConfigurationResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetadataConfigurationResultBuilder {
    pub(crate) destination_result: ::std::option::Option<crate::types::DestinationResult>,
    pub(crate) journal_table_configuration_result: ::std::option::Option<crate::types::JournalTableConfigurationResult>,
    pub(crate) inventory_table_configuration_result: ::std::option::Option<crate::types::InventoryTableConfigurationResult>,
}
impl MetadataConfigurationResultBuilder {
    /// <p>The destination settings for a metadata configuration.</p>
    /// This field is required.
    pub fn destination_result(mut self, input: crate::types::DestinationResult) -> Self {
        self.destination_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination settings for a metadata configuration.</p>
    pub fn set_destination_result(mut self, input: ::std::option::Option<crate::types::DestinationResult>) -> Self {
        self.destination_result = input;
        self
    }
    /// <p>The destination settings for a metadata configuration.</p>
    pub fn get_destination_result(&self) -> &::std::option::Option<crate::types::DestinationResult> {
        &self.destination_result
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn journal_table_configuration_result(mut self, input: crate::types::JournalTableConfigurationResult) -> Self {
        self.journal_table_configuration_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn set_journal_table_configuration_result(mut self, input: ::std::option::Option<crate::types::JournalTableConfigurationResult>) -> Self {
        self.journal_table_configuration_result = input;
        self
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn get_journal_table_configuration_result(&self) -> &::std::option::Option<crate::types::JournalTableConfigurationResult> {
        &self.journal_table_configuration_result
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn inventory_table_configuration_result(mut self, input: crate::types::InventoryTableConfigurationResult) -> Self {
        self.inventory_table_configuration_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn set_inventory_table_configuration_result(mut self, input: ::std::option::Option<crate::types::InventoryTableConfigurationResult>) -> Self {
        self.inventory_table_configuration_result = input;
        self
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn get_inventory_table_configuration_result(&self) -> &::std::option::Option<crate::types::InventoryTableConfigurationResult> {
        &self.inventory_table_configuration_result
    }
    /// Consumes the builder and constructs a [`MetadataConfigurationResult`](crate::types::MetadataConfigurationResult).
    pub fn build(self) -> crate::types::MetadataConfigurationResult {
        crate::types::MetadataConfigurationResult {
            destination_result: self.destination_result,
            journal_table_configuration_result: self.journal_table_configuration_result,
            inventory_table_configuration_result: self.inventory_table_configuration_result,
        }
    }
}
