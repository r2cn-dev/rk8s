// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 Metadata configuration for a general purpose bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataConfiguration {
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub journal_table_configuration: ::std::option::Option<crate::types::JournalTableConfiguration>,
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub inventory_table_configuration: ::std::option::Option<crate::types::InventoryTableConfiguration>,
}
impl MetadataConfiguration {
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn journal_table_configuration(&self) -> ::std::option::Option<&crate::types::JournalTableConfiguration> {
        self.journal_table_configuration.as_ref()
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn inventory_table_configuration(&self) -> ::std::option::Option<&crate::types::InventoryTableConfiguration> {
        self.inventory_table_configuration.as_ref()
    }
}
impl MetadataConfiguration {
    /// Creates a new builder-style object to manufacture [`MetadataConfiguration`](crate::types::MetadataConfiguration).
    pub fn builder() -> crate::types::builders::MetadataConfigurationBuilder {
        crate::types::builders::MetadataConfigurationBuilder::default()
    }
}

/// A builder for [`MetadataConfiguration`](crate::types::MetadataConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetadataConfigurationBuilder {
    pub(crate) journal_table_configuration: ::std::option::Option<crate::types::JournalTableConfiguration>,
    pub(crate) inventory_table_configuration: ::std::option::Option<crate::types::InventoryTableConfiguration>,
}
impl MetadataConfigurationBuilder {
    /// <p>The journal table configuration for a metadata configuration.</p>
    /// This field is required.
    pub fn journal_table_configuration(mut self, input: crate::types::JournalTableConfiguration) -> Self {
        self.journal_table_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn set_journal_table_configuration(mut self, input: ::std::option::Option<crate::types::JournalTableConfiguration>) -> Self {
        self.journal_table_configuration = input;
        self
    }
    /// <p>The journal table configuration for a metadata configuration.</p>
    pub fn get_journal_table_configuration(&self) -> &::std::option::Option<crate::types::JournalTableConfiguration> {
        &self.journal_table_configuration
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn inventory_table_configuration(mut self, input: crate::types::InventoryTableConfiguration) -> Self {
        self.inventory_table_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn set_inventory_table_configuration(mut self, input: ::std::option::Option<crate::types::InventoryTableConfiguration>) -> Self {
        self.inventory_table_configuration = input;
        self
    }
    /// <p>The inventory table configuration for a metadata configuration.</p>
    pub fn get_inventory_table_configuration(&self) -> &::std::option::Option<crate::types::InventoryTableConfiguration> {
        &self.inventory_table_configuration
    }
    /// Consumes the builder and constructs a [`MetadataConfiguration`](crate::types::MetadataConfiguration).
    pub fn build(self) -> crate::types::MetadataConfiguration {
        crate::types::MetadataConfiguration {
            journal_table_configuration: self.journal_table_configuration,
            inventory_table_configuration: self.inventory_table_configuration,
        }
    }
}
